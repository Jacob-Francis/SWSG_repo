# Define the input data or parameters
profiles = ["jet", "uniform", "incline"]
methods = ["one", "four"]
epsilons = [0.05, 0.025, 0.0125, 0.00625, 0.003125]
whichs = [1, 2, 3, 4]
# Specify the available CUDA devices as resources
  # Two CUDA devices available
configfile: "config.yaml"


rule all:
    input:
        # expand("data_store/{method}_epsilon_{epsilon}_profile_{profile}_results.pkl", 
        #        method=methods, epsilon=epsilons, profile=profiles),
        expand("data_store/{method}_epsilon_{epsilon}_profile_{profile}_errors.pkl", 
               method=methods, epsilon=epsilons, profile=profiles),
        expand("data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_{which}_which.pkl", method=methods, epsilon=epsilons, profile=profiles, which=whichs)


# # rule run_lloyd:
# #     output:
# #         lloyd_file="data_store/epsilon_{epsilon}_profile_{profile}_llody.pkl"
# #     params:
# #         profile="{profile}",
# #         d=1
# #     shell:
# #         """
# #         python3 -c '
# # from swsg_simulation_class import SWSGSimulation

# # sim = SWSGSimulation(cuda=None, profile="{params.profile}", d={params.d})
# # sim.generate_case({wildcards.epsilon}, output_dir="data_store")
# # '> {wildcards.epsilon}{wildcards.profile}.out 2> {wildcards.epsilon}{wildcards.profile}.err
# #         """

# # rule run_simulation:
# #     input:
# #         lloyd_file="data_store/epsilon_{epsilon}_profile_{profile}_llody.pkl"
# #     output:
# #         results_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_results.pkl"
# #     params:
# #         profile="{profile}",
# #         d=1
# #     shell:
# #         """
# #         python3 -c '
# # from swsg_simulation_class import SWSGSimulation

# # sim = SWSGSimulation(cuda=None, profile="{params.profile}", d={params.d})
# # sim.run_simulation("{wildcards.method}", {wildcards.epsilon}, "{input.lloyd_file}", output_dir="data_store")
# # '> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.out 2> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.err
# #         """
        
# # rule run_dense_sym:
# #     output:
# #         dense_sym_dict="data_store/dense_sym_profile_{profile}_dict.pkl"
# #     params:
# #         profile="{profile}",
# #         d=1,
# #         b=10
# #     shell:
# #         """
# #         python3 -c '
# # from swsg_simulation_class import SWSGSimulation

# # sim = SWSGSimulation(cuda=None, profile="{params.profile}", d={params.d}, b={params.b})
# # sim.compute_density_symmetric_potential(output_dir="data_store")
# # '> dense_{wildcards.profile}.out 2> dense_{wildcards.profile}.err
# #         """

# rule compute_l_errors:
#     input:
#         results_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_results.pkl",
#         lloyd_file="data_store/epsilon_{epsilon}_profile_{profile}_llody.pkl"
#     params:
#         profile="{profile}",
#         d=1
#     output:
#         errors_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_lnormerrors.pkl"
#     shell:
#         """
#         python3 -c '
# from swsg_simulation_class import SWSGSimulation

# sim = SWSGSimulation(profile="{params.profile}", d={params.d})
# sim.compute_errors("{wildcards.method}", {wildcards.epsilon}, "{input.results_file}", "{input.lloyd_file}", output_dir="data_store")
# ' >> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.out 2>> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.err
#         """

rule compute_w2_errors:
    input:
        results_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_results.pkl",
        lloyd_file="data_store/epsilon_{epsilon}_profile_{profile}_llody.pkl",
        errors_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_lnormerrors.pkl",
        dense_sym_dict="data_store/dense_sym_profile_{profile}_dict.pkl"
    output:
        temp_errors = "data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_{which}_which.pkl"
    params:
        profile="{profile}",
        d=1
    shell:
        """
        python3 -c '
from swsg_simulation_class import SWSGSimulation

sim = SWSGSimulation(cuda=None, profile="{params.profile}", d={params.d})
sim.compute_W2_errors("{wildcards.method}", {wildcards.epsilon}, "{input.results_file}", "{input.lloyd_file}", "{input.errors_file}", output_dir="data_store",which=wildcards.which)
' >> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.out 2>> {wildcards.method}{wildcards.epsilon}{wildcards.profile}.err
        """

rule combine_w2_errors:
    input:
        temp_1 = "data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_1_which.pkl",
        temp_2 = "data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_2_which.pkl",
        temp_3 = "data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_3_which.pkl",
        temp_4 = "data_store/temp/{method}_epsilon_{epsilon}_profile_{profile}_errors_4_which.pkl"
    output:
        allerrors_file="data_store/{method}_epsilon_{epsilon}_profile_{profile}_errors.pkl"
    params:
        profile="{profile}",
        d=1
    shell:
        """
        python3 -c '
from swsg_simulation_class import SWSGSimulation

sim = SWSGSimulation(cuda=None, profile="{params.profile}", d={params.d})
sim.combine_dicts("{wildcards.method}", {wildcards.epsilon}, output_dir="data_store")
'
        """
